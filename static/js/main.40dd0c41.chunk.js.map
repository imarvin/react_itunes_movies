{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SearchContext","createContext","SearchContextProvider","props","useState","term","setTerm","results","setResults","GET_URL","useEffect","console","log","fetch","then","res","json","data","catch","error","message","Provider","value","children","FavMovie","FavMovieProvider","favs","setFavs","Header","className","MovieItem","fav","movie","index","buttonFunction","data-id","trackId","trackName","onClick","e","data-fav","SearchForm","useContext","search","setSearch","onSubmit","preventDefault","type","onChange","target","placeholder","SearchResults","dataset","map","i","find","f","key","Favs","copyFavs","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40dd0c41.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport './App.scss';\n\n\n// CONTEXTS\n\n// search context\nconst SearchContext = createContext();\nconst SearchContextProvider = (props) => {\n  const [term, setTerm] = useState('');\n  const [results, setResults] = useState([]);\n  \n  // itunes docs: https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/\n  const GET_URL = `https://itunes.apple.com/search?entity=movie&attribute=movieTerm&limit=10&term=${term}`;\n\n  // useEffect to fetch when GET_URL updates based on new search string(term)\n  useEffect(() => {\n    console.log('\\nSearching...')\n    fetch(GET_URL)\n      .then(res => res.json())\n      .then(data => {\n        setResults([...data.results]);\n        console.log('>> data fetched', data.results);\n      })\n      .catch(error => {\n        console.log('>> get error,', error.message);\n      });\n  }, [GET_URL])\n\n  return (\n    <SearchContext.Provider value={{ term, results, setTerm, setResults }}>\n      {props.children}\n    </SearchContext.Provider>\n  )\n}\n\n// favorite context\nconst FavMovie = createContext();\nconst FavMovieProvider = (props) => {\n  const [favs, setFavs] = useState([]);\n\n  return (\n    <FavMovie.Provider value={{ favs, setFavs }}>\n      {props.children}\n    </FavMovie.Provider>\n  )\n}\n\n\n\n// COMPONENTS\n\n// header\nconst Header = () => {\n  return (\n    <header className=\"search__header\">\n      <h1>iTunes Movie Search</h1>\n      <nav></nav>\n      <SearchForm />\n    </header>\n  )\n}\n\n// movie item\nconst MovieItem = (props) => {\n  const { fav, movie, index, buttonFunction } = props;\n\n  return (\n      <li className=\"search__item\" data-id={movie.trackId}>\n        {movie.trackName}\n        { fav ? (\n          <button onClick={e => buttonFunction(index)} data-fav={true}>UnFav</button>\n        ) : (\n          <button onClick={e => buttonFunction(e, movie)} data-fav={false}>Fav</button>\n        )}\n      </li>\n  )\n}\n\n\n// search form\nconst SearchForm = () => {\n  const { setTerm, setResults } = useContext(SearchContext);\n  const [ search, setSearch ] = useState('');\n\n  const onChangeHandler = (e) => {\n    e.preventDefault();\n    setSearch(e.target.value);\n  }\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n    setResults([]);\n    setTerm(search);\n  }\n\n  return (\n    <form onSubmit={onSubmitHandler}>\n      <input type=\"text\" value={search} onChange={onChangeHandler} placeholder=\"Search for movies\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  )\n}\n\n// search results\nconst SearchResults = () => {\n  const { results } = useContext(SearchContext);\n  const { favs, setFavs } = useContext(FavMovie);\n\n  console.log(\">> results:\", results);\n\n  const buttonFunction = (e, movie) => {\n    console.log('button Fav:', e.target.dataset.fav);\n    if(e.target.dataset.fav === \"false\") {\n      setFavs([\n        ...favs,\n        {\n          trackId: movie.trackId,\n          trackName: movie.trackName\n        }\n      ]);\n      e.target.dataset.fav = true;\n    }\n  }\n\n  return (\n    <div className=\"search__list results\">\n      <h2>Search results:</h2>\n      <ul>\n        { results &&\n            results.map((movie, i) => {\n              let fav = favs.find(f => f.trackId === movie.trackId) ? true : false;\n              return (\n                <MovieItem key={movie.trackId} fav={fav} index={i} movie={movie} buttonFunction={buttonFunction}></MovieItem>\n              )\n            })\n        }\n      </ul>\n    </div>\n  )\n}\n\n// favorites\nconst Favs = () => {\n  const { favs, setFavs } = useContext(FavMovie);\n  console.log('favs:', favs);\n\n  const buttonFunction = index => {\n    const copyFavs = favs;\n    copyFavs.splice(index, 1); // remove from favs\n    setFavs([...copyFavs]);\n  };\n\n  return (\n    <div className=\"search__list favs\">\n      <h2>Favs:</h2>\n      <ul>\n        { favs &&\n            favs.map(movie => {\n              return (\n                <MovieItem key={movie.trackId} fav={true} movie={movie} buttonFunction={buttonFunction}></MovieItem>\n              )\n            })\n        }\n      </ul>\n    </div>\n  )\n}\n\n\nfunction App() {\n  return (\n    <div className=\"search\">\n      <SearchContextProvider>\n        <Header />\n        <FavMovieProvider>\n          <main>\n            <SearchResults />\n            <Favs />\n          </main>\n        </FavMovieProvider>\n      </SearchContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}