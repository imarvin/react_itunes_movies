{"version":3,"sources":["contexts/FavContext.js","contexts/SearchContext.js","components/SearchForm.js","components/Header.js","components/MovieItem.js","components/Favs.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["FavContext","createContext","FavContextProvider","props","useState","favs","setFavs","isModalOpen","setModalOpen","Provider","value","children","SearchContext","SearchContextProvider","term","setTerm","results","setResults","GET_URL","useEffect","fetch","then","res","json","data","console","log","catch","error","message","SearchForm","useContext","searchString","setSearchString","className","onSubmit","e","preventDefault","type","onChange","target","placeholder","Header","onClick","length","MovieItem","fav","movie","index","buttonFunction","data-id","trackId","data-fav","data-index","src","artworkUrl100","alt","trackCensoredName","trackName","Favs","id","dataset","newFavs","filter","obj","toString","closeModal","isOpen","onRequestClose","style","overlay","backgroundColor","zIndex","content","border","top","left","right","bottom","marginRight","minHeight","minWidth","maxHeight","maxWidth","transform","transition","shouldFocusAfterRender","contentLabel","map","key","SearchResults","i","find","f","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","ReactModal","setAppElement","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.740b64e4.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const FavContext = createContext();\n\nconst FavContextProvider = (props) => {\n  const [favs, setFavs] = useState([]);\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  return (\n    <FavContext.Provider value={{ favs, setFavs, isModalOpen, setModalOpen }}>\n      {props.children}\n    </FavContext.Provider>\n  )\n}\n\nexport default FavContextProvider;","import React, { createContext, useState, useEffect } from 'react';\n\nexport const SearchContext = createContext();\n\nconst SearchContextProvider = (props) => {\n  const [term, setTerm] = useState('');\n  const [results, setResults] = useState([]);\n  \n  // itunes docs: \n  //   https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/\n  const GET_URL = `https://itunes.apple.com/search?entity=movie&attribute=movieTerm&limit=10&term=${term}`;\n  \n  useEffect(() => {\n    // search itunes api\n    fetch(GET_URL)\n      .then(res => res.json())\n      .then(data => {\n        setResults([...data.results]);\n        console.log('>> data fetched', data.results);\n      })\n      .catch(error => {\n        console.log('>> get error,', error.message);\n      });\n  }, [GET_URL])\n\n  return (\n    <SearchContext.Provider value={{ term, results, setTerm, setResults }}>\n      {props.children}\n    </SearchContext.Provider>\n  )\n}\n\nexport default SearchContextProvider;","import React, { useContext, useState } from 'react';\nimport { SearchContext } from './../contexts/SearchContext';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst SearchForm = () => {\n    const {setTerm, setResults} = useContext(SearchContext);\n    const [searchString, setSearchString] = useState('');\n\n    // keep track of search string\n    const onChangeHandler = (e) => {\n        e.preventDefault();\n        setSearchString(e.target.value);\n    }\n\n    // submit search string on submit\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        setResults([]);\n        setTerm(searchString);\n    }\n\n    return (\n        <form className=\"header__form col\" onSubmit={onSubmitHandler}>\n            <label className=\"header__form-wrapper\">\n                <SearchIcon className=\"header__svg-search\"></SearchIcon>\n                <input className=\"header__input\" type=\"text\" value={searchString} onChange={onChangeHandler} placeholder=\"Search for movies\" />\n                <button className=\"header__button\" type=\"submit\">Search</button>\n            </label>\n        </form>\n    )\n}\n\nexport default SearchForm;\n","import React, { useContext } from 'react';\nimport SearchForm from './SearchForm';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { FavContext } from '../contexts/FavContext';\n\nconst Header = props => {\n    const { favs, setModalOpen } = useContext(FavContext);\n    return (\n        <header className=\"header\">\n            <div className=\"header__menu col\">\n                <MenuIcon className=\"header__svg-menu\"></MenuIcon>\n            </div>\n            <SearchForm />\n            <div className=\"header__favs col\">\n                <button className=\"header__button-fav svg-wrapper\" onClick={() => setModalOpen(true)}>\n                    <FavoriteIcon className=\"header__svg-fav\"></FavoriteIcon>{favs.length}\n                </button>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react'\n//import FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nconst MovieItem = (props) => {\n    const { fav, movie, index, buttonFunction } = props;\n    \n    return (\n        <li className=\"search__item\" data-id={movie.trackId}>\n            <button className=\"search__item-button svg-wrapper\" onClick={buttonFunction} data-fav={fav} data-index={index} data-id={movie.trackId}>\n                <FavoriteIcon className=\"search__item-button-fav\"></FavoriteIcon>\n            </button>\n            <img className=\"search__item-thumbnail\" src={movie.artworkUrl100} alt={movie.trackCensoredName} />\n            <div className=\"search__item-title\">{movie.trackName}</div>\n        </li>\n    )\n}\n\nexport default MovieItem;\n","import React, { useContext, useEffect } from 'react';\nimport MovieItem from './MovieItem';\nimport { FavContext } from './../contexts/FavContext';\nimport { SearchContext } from '../contexts/SearchContext';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Modal from \"react-modal\";\n\nexport const MODAL_ID = \"React_MODAL\";\n\nconst Favs = () => {\n  const { favs, setFavs, isModalOpen, setModalOpen } = useContext(FavContext);\n  const { results, setResults } = useContext(SearchContext);\n  \n  // function for removing movies from favorites\n  const buttonFunction = (e, index) => {\n    e.preventDefault();\n    const { id } = e.target.dataset;\n    const newFavs = favs.filter(obj => obj.trackId.toString() !== id);\n    setFavs([ ...newFavs ]);\n  };\n\n  // make sure movies in search results corresponds with updated favorites\n  useEffect(() => {\n      setResults([...results]);\n  }, []);\n\n  // modal close function\n  const closeModal = () => {\n    setModalOpen(false);\n  }\n\n  // modal css styles\n  const customStyles = {\n    overlay: {\n      backgroundColor: \"rgba(0, 0, 0, 0.16)\",\n      zIndex: 10000\n    },\n    content: {\n      backgroundColor: \"#292929\",\n      border: \"0\",\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      minHeight: \"75%\",\n      minWidth: \"75%\",\n      maxHeight: \"75%\",\n      maxWidth: \"75%\",\n      transform: \"translate(-50%, -50%)\",\n      transition: \"all 0.7s\"\n    }\n  };\n\n  return (\n    <>      \n      <Modal\n        isOpen={isModalOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n        shouldFocusAfterRender\n        contentLabel=\"Favorite Movies\"\n      >\n        \n        <button className=\"modal__button-close svg-wrapper\" onClick={closeModal}>\n          <CloseIcon className=\"modal__button-svg\"></CloseIcon>\n        </button>\n        <div className=\"search__list favs\">\n          <h2>Favorites:</h2>\n          <ul>\n            {favs &&\n              favs.map(movie => {\n                return (\n                  <MovieItem key={movie.trackId} fav={true} movie={movie} buttonFunction={buttonFunction}></MovieItem>\n                )\n              })\n            }\n          </ul>\n        </div>\n\n      </Modal>\n      <div id={MODAL_ID} />\n    </>\n  )\n}\n\nexport default Favs;\n","import React, { useContext } from 'react';\nimport MovieItem from './MovieItem';\nimport { FavContext } from './../contexts/FavContext';\nimport { SearchContext } from './../contexts/SearchContext';\n\nconst SearchResults = () => {\n    const { results } = useContext(SearchContext);\n    const { favs, setFavs } = useContext(FavContext);\n\n    // function for fav icon in search results\n    // will either add or remove from favorites\n    const buttonFunction = (e) => {\n        e.preventDefault();\n        const { fav, index, id } = e.target.dataset;\n        \n        if (fav === \"false\") {\n            //add to favs\n            setFavs([ ...favs, {...results[index]} ]);\n            e.target.dataset.fav = true;\n        } else {\n            // remove from favs\n            const newFavs = favs.filter(obj => obj.trackId.toString() !== id);\n            setFavs([ ...newFavs ]);\n            e.target.dataset.fav = false;\n        }\n    }\n\n    return (\n        <div className=\"search__list results\">\n            { results.length < 0 &&\n                <h2>Welcome.  Please use the search tool above.</h2>\n            }\n            <ul>\n            {results &&\n                results.map((movie, i) => {\n                    // see if search result is a favorite\n                    let fav = favs.find(f => f.trackId === movie.trackId) ? true : false;\n                    return (\n                        <MovieItem key={movie.trackId} fav={fav} index={i} movie={movie} buttonFunction={buttonFunction}></MovieItem>\n                    )\n                })\n            }\n            </ul>\n        </div>\n    )\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport FavContextProvider from './contexts/FavContext';\nimport SearchContextProvider from './contexts/SearchContext';\nimport Header from './components/Header';\nimport Favs from './components/Favs';\nimport SearchResults from './components/SearchResults';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"search\">\n      <SearchContextProvider>\n        <FavContextProvider>\n          <Header />\n          <main>\n            <SearchResults />\n            <Favs />\n          </main>\n        </FavContextProvider>\n      </SearchContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactModal from \"react-modal\";\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MODAL_ID } from './components/Favs';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactModal.setAppElement(`#${MODAL_ID}`);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}