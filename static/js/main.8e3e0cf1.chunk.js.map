{"version":3,"sources":["contexts/FavContext.js","contexts/SearchContext.js","components/SearchForm.js","components/Header.js","components/MovieItem.js","components/Favs.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["FavContext","createContext","FavContextProvider","props","useState","favs","setFavs","Provider","value","children","SearchContext","SearchContextProvider","term","setTerm","results","setResults","GET_URL","useEffect","fetch","method","mode","headers","then","res","json","data","catch","error","console","log","message","SearchForm","useContext","search","setSearch","onSubmit","e","preventDefault","type","onChange","target","placeholder","className","Header","MovieItem","fav","movie","index","buttonFunction","data-id","trackId","trackName","onClick","data-fav","Favs","copyFavs","splice","map","key","SearchResults","dataset","i","find","f","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e3e0cf1.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const FavContext = createContext();\n\nconst FavContextProvider = (props) => {\n  const [favs, setFavs] = useState([]);\n\n  return (\n    <FavContext.Provider value={{ favs, setFavs }}>\n      {props.children}\n    </FavContext.Provider>\n  )\n}\n\nexport default FavContextProvider;","import React, { createContext, useState, useEffect } from 'react';\n\nexport const SearchContext = createContext();\n\nconst SearchContextProvider = (props) => {\n  const [term, setTerm] = useState('');\n  const [results, setResults] = useState([]);\n  \n  // itunes docs: https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/\n  const GET_URL = `https://itunes.apple.com/search?entity=movie&attribute=movieTerm&limit=10&term=${term}`;\n\n  // useEffect to fetch when GET_URL updates based on new search string(term)\n  useEffect(() => {\n    //console.log('\\nSearching...')\n    fetch(GET_URL,{\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'no-cors', // no-cors, *cors, same-origin\n        //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        //credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n          'Content-Type': 'application/json'\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        }\n      })\n      .then(res => res.json())\n      .then(data => {\n        setResults([...data.results]);\n        //console.log('>> data fetched', data.results);\n      })\n      .catch(error => {\n        console.log('>> get error,', error.message);\n      });\n  }, [GET_URL])\n\n  return (\n    <SearchContext.Provider value={{ term, results, setTerm, setResults }}>\n      {props.children}\n    </SearchContext.Provider>\n  )\n}\n\nexport default SearchContextProvider;","import React, { useContext, useState } from 'react';\nimport { SearchContext } from './../contexts/SearchContext';\n\nconst SearchForm = () => {\n    const {setTerm, setResults} = useContext(SearchContext);\n    const [search, setSearch] = useState('');\n\n    const onChangeHandler = (e) => {\n        e.preventDefault();\n        setSearch(e.target.value);\n    }\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        setResults([]);\n        setTerm(search);\n    }\n\n    return (\n        <form onSubmit={onSubmitHandler}>\n            <input type=\"text\" value={search} onChange={onChangeHandler} placeholder=\"Search for movies\" />\n            <button className=\"button\" type=\"submit\">Search</button>\n        </form>\n    )\n}\n\nexport default SearchForm;\n","import React from 'react';\nimport SearchForm from './SearchForm';\n\nconst Header = props => {\n    return (\n        <header className=\"search__header\">\n            <h1>iTunes Movie Search</h1>\n            <nav></nav>\n            <SearchForm />\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react'\n\nconst MovieItem = (props) => {\n    const { fav, movie, index, buttonFunction } = props;\n\n    return (\n        <li className=\"search__item\" data-id={movie.trackId}>\n            {movie.trackName}\n            {fav ? (\n                <button className=\"button\" onClick={e => buttonFunction(index)} data-fav={true}>UnFav</button>\n            ) : (\n                <button className=\"button\" onClick={e => buttonFunction(e, movie)} data-fav={false}>Fav</button>\n            )}\n        </li>\n    )\n}\n\nexport default MovieItem;\n","import React, { useContext } from 'react';\nimport MovieItem from './MovieItem';\nimport { FavContext } from './../contexts/FavContext';\n\nconst Favs = () => {\n  const { favs, setFavs } = useContext(FavContext);\n  //console.log('favs:', favs);\n\n  const buttonFunction = index => {\n    const copyFavs = favs;\n    copyFavs.splice(index, 1); // remove from favs\n    setFavs([...copyFavs]);\n  };\n\n  return (\n    <div className=\"search__list favs\">\n      <h2>Favs:</h2>\n      <ul>\n        { favs &&\n            favs.map(movie => {\n              return (\n                <MovieItem key={movie.trackId} fav={true} movie={movie} buttonFunction={buttonFunction}></MovieItem>\n              )\n            })\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default Favs;\n","import React, { useContext } from 'react';\nimport MovieItem from './MovieItem';\nimport { FavContext } from './../contexts/FavContext';\nimport { SearchContext } from './../contexts/SearchContext';\n\n\nconst SearchResults = () => {\n    const { results } = useContext(SearchContext);\n    const { favs, setFavs } = useContext(FavContext);\n\n    //console.log(\">> results:\", results);\n\n    const buttonFunction = (e, movie) => {\n        if (e.target.dataset.fav === \"false\") {\n            setFavs([\n                ...favs,\n                {\n                    trackId: movie.trackId,\n                    trackName: movie.trackName\n                }\n            ]);\n            e.target.dataset.fav = true;\n        }\n    }\n\n    return (\n        <div className=\"search__list results\">\n            <h2>Search results:</h2>\n            <ul>\n                {results &&\n                    results.map((movie, i) => {\n                        let fav = favs.find(f => f.trackId === movie.trackId) ? true : false;\n                        return (\n                            <MovieItem key={movie.trackId} fav={fav} index={i} movie={movie} buttonFunction={buttonFunction}></MovieItem>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport FavContextProvider from './contexts/FavContext';\nimport SearchContextProvider from './contexts/SearchContext';\nimport Header from './components/Header';\nimport Favs from './components/Favs';\nimport SearchResults from './components/SearchResults';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"search\">\n      <SearchContextProvider>\n        <Header />\n        <FavContextProvider>\n          <main>\n            <SearchResults />\n            <Favs />\n          </main>\n        </FavContextProvider>\n      </SearchContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}